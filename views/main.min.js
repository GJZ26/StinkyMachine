
const collection_div_container = document.getElementById("collection-file");
const doclist = document.getElementById("documentList")

const SelfHost = window.location.host;
const SelfProtocol = window.location.protocol;

const TargetHost = "regimen.localhost"
const TargetProtocol = "http:"

function formatSize(sizeInBytes) {
    const kilobytes = sizeInBytes / 1024;
    if (kilobytes < 1024) {
        return kilobytes.toFixed(2) + ' KB';
    } else {
        const megabytes = kilobytes / 1024;
        return megabytes.toFixed(2) + ' MB';
    }
}

function formatDateTime(date) {
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    return ` | ${day}/${month}/${year} - ${hours}:${minutes} | `;
}

function listFiles(files) {
    doclist.innerHTML = ""
    if (files.length == 0) {
        const nodeChido = document.createElement("p")
        nodeChido.textContent = "Ninguno, claramente..."
        doclist.appendChild(nodeChido)
        return
    }
    for (let i = 0; i < files.length; i++) {
        let node = document.createElement("li");
        let sizeNode = document.createElement("span");
        let dateNode = document.createElement("span");

        node.id = files[i].name

        sizeNode.classList.add("sizeNode")
        dateNode.classList.add("dateNode")

        sizeNode.textContent = formatSize(files[i].size)
        dateNode.textContent = formatDateTime(new Date(files[i].lastModified));

        node.textContent = files[i].name
        node.appendChild(dateNode);
        node.appendChild(sizeNode);
        doclist.appendChild(node);
    }
    let btn = document.createElement("button")
    btn.textContent = "Vamo a darle"
    btn.addEventListener("click", sendFiles)
    doclist.append(btn)
}

function dragOverHandler(event) {
    this.removeAttribute('class');

    if (event.type === 'dragenter') {
        this.children[0].textContent = "¡Suéltalo!";
        this.children[1].textContent = "Cuando quieras, no hay prisa";
        this.classList.add('file-dragged');
    }
    if (event.type === 'dragleave') {
        if (this.children[2].files.length > 0) {
            this.classList.add('file-dropped');
            this.children[0].textContent = "¡Listo!";
            this.children[1].textContent = "Cuando estés listo, da click en 'Vamo a darle'";
            return
        }

        this.children[0].textContent = "Tira los archivos aquí";
        this.children[1].textContent = "O da click aquí para seleccionarlo, funciona igual";
        this.classList.add('file-drop');
    }
}

function updateNamesList(event) {
    const parent = event.target.offsetParent;

    parent.removeAttribute('class');

    listFiles(event.target.files)
    if (event.target.files.length === 0) {
        parent.children[0].textContent = "Tira los archivos aquí";
        parent.children[1].textContent = "O da click aquí para seleccionarlo, funciona igual";
        parent.classList.add('file-drop');
        return
    }

    parent.classList.add('file-dropped');

    parent.children[0].textContent = "¡Listo!";
    parent.children[1].textContent = "Cuando estés listo, da click en 'Vamo a darle'";
}

function dropHandler() {
    this.removeAttribute('class');
    if (this.children[2].files.length > 0) {
        this.classList.add('file-dropped');
        this.children[0].textContent = "Tira los archivos aquí";
        this.children[1].textContent = this.children[2].files[0].name;
        return
    }

    this.children[0].textContent = "Drop your file here";
    this.children[1].textContent = "O da click aquí para seleccionarlo, funciona igual";
    this.classList.add('file-drop');
}


function sendFiles(event) {
    collection_div_container.children[0].textContent = "Subiendo archivos";
    collection_div_container.children[1].textContent = "Espera un momento, no tardamos...";
    collection_div_container.removeAttribute("class")
    collection_div_container.classList.add("file-blocked")
    collection_div_container.children[2].disabled = true
    let clonedMueje = collection_div_container.cloneNode(true);

    let coolContainer = document.createElement("div")
    coolContainer.classList.add("progresContainer")

    event.target.disabled = true;
    let clonedBtn = event.target.cloneNode(true);
    event.target.remove()
    coolContainer.appendChild(clonedBtn)

    collection_div_container.replaceWith(clonedMueje)

    let progrsVar = document.createElement('div');
    let upld = document.createElement('div');
    let prcSegment = document.createElement('div');
    prcSegment.classList.add("proces");

    progrsVar.textContent = "Subiendo"
    progrsVar.classList.add("progress")
    upld.classList.add('uploaded')
    upld.style.width = "0%"

    progrsVar.appendChild(upld);
    coolContainer.appendChild(progrsVar);
    coolContainer.appendChild(prcSegment);
    doclist.appendChild(coolContainer);

    const archivos = collection_div_container.children[2].files;
    const formData = new FormData();

    for (let i = 0; i < archivos.length; i++) {
        formData.append('archivos', archivos[i]);
    }

    const xhr = new XMLHttpRequest();

    xhr.open('POST', `${SelfProtocol}//${SelfHost}/upload`);

    xhr.upload.addEventListener('progress', function (event) {
        if (event.lengthComputable) {
            const porcentaje = (event.loaded / event.total) * 100;
            upld.style.width = `${porcentaje.toFixed(2)}%`;

            if (event.loaded === event.total) {
                progrsVar.textContent = "¡Hecho!"
                progrsVar.appendChild(upld);
                prcSegment.classList.add("waiting");
                prcSegment.textContent = "Procesando"
            }
        }
    });

    xhr.onload = function () {
        if (xhr.status === 200) {
            const jsonResponse = JSON.parse(xhr.responseText.replace(/\\/g, '/'));
            console.log(jsonResponse);
            prcSegment.classList.remove("waiting");
            prcSegment.classList.add("done");
            prcSegment.textContent = "¡Listo!"

            getFromProccessResource()
        } else {
            console.error('Error al cargar los archivos.');
            prcSegment.classList.remove("waiting");
            prcSegment.classList.add("error");
            prcSegment.textContent = "Ha ocurrido un error al procesar los archivos..."
        }
    };

    xhr.onerror = function () {
        console.error('Error en la solicitud.');
        progrsVar.textContent = "Oh oh..."
        progrsVar.appendChild(upld);
        prcSegment.classList.remove("waiting");
        prcSegment.classList.add("error");
        prcSegment.textContent = "No se ha podido hacer la petición :("
    };

    xhr.send(formData);
}

collection_div_container.ondragenter = dragOverHandler;
collection_div_container.ondragleave = dragOverHandler;


collection_div_container.children[2].onchange = updateNamesList;
collection_div_container.ondrop = dropHandler;
document.getElementById("kill").onclick = () => {
    if (confirm('Al apagar el servidor, todos los datos procesados serán eliminados. ¿Deseas apagar la aplicación de cualquier forma?')) {
        fetch(`${SelfProtocol}//${SelfHost}/shutdown`, {
            method: "GET"
        })

        setTimeout(()=>{
            location.reload()
        },1000)
    } else {
    }
}
var globalDataForSendToWP = []
var globalCategories = {}
var globalTags = {}
var selectedImages = {}
var documentReviewed = {}
var selectedCategories = {}

function getFromProccessResource() {
    fetch(`${SelfProtocol}//${SelfHost}/computed/processData.json`, {
        method: "GET"
    }).then((response) => response.json())
        .then((data) => {
            globalDataForSendToWP = data

            for (let i = 0; i < globalDataForSendToWP.length; i++) {
                if (typeof (globalDataForSendToWP[i]) == "string") continue

                documentReviewed[i] = false

                let documents = globalDataForSendToWP[i].documents
                for (let j = 0; j < documents.length; j++) {
                    if (!selectedImages[i]) {
                        selectedImages[i] = {};
                        selectedCategories[i] = {}
                    }
                    selectedCategories[i][j] = []
                    selectedImages[i][j] = randomIntFromInterval(0, globalDataForSendToWP[i].images[j].length - 1);
                }
            }
            renderData(data)
            let enviarBtn = document.createElement("button")
            let span = document.createElement('span')
            let delay = document.createElement('input')
            let span2 = document.createElement('span')

            span.textContent = "Con demora de "
            span.style.display = "none"
            span2.textContent = "minutos entre cada publicación"
            span2.style.display = "none"
            delay.type = "number"
            delay.min = 0
            delay.style.display = "none"
            delay.max = 1000
            delay.value = 0

            enviarBtn.textContent = "¡Subir!"
            enviarBtn.classList.add("magicbtn")
            enviarBtn.onclick = (event) => { sendPosts(event, delay) }
            document.getElementsByClassName("progresContainer")[0].innerHTML = ""
            document.getElementsByClassName("progresContainer")[0].appendChild(enviarBtn)
            document.getElementsByClassName("progresContainer")[0].appendChild(span)
            document.getElementsByClassName("progresContainer")[0].appendChild(delay)
            document.getElementsByClassName("progresContainer")[0].appendChild(span2)
        })
        .catch(
            (err) => {
                console.error(err)
            })

    fetch(`${SelfProtocol}//${SelfHost}/assets/categoriesRaw.json`, {
        method: "GET"
    }).then((response) => response.json())
        .then((data) => {
            globalCategories = data
        })

    fetch(`${SelfProtocol}//${SelfHost}/assets/tagsRaw.json`, {
        method: "GET"
    }).then(res => res.json())
        .then(data => {
            globalTags = data
        })
}

function renderData(dataParsed) {
    const unavailableDocs = []
    const availableDocs = {}

    for (let i = 0; i < dataParsed.length; i++) {
        if (typeof (dataParsed[i]) == "string") {
            unavailableDocs.push(dataParsed[i])
            continue
        }
        availableDocs[dataParsed[i].foldername] = i
    }

    for (let i = 0; i < doclist.children.length - 1; i++) {
        if (doclist.children[i].textContent.includes(unavailableDocs)) {
            doclist.children[i].classList.add("error")
            continue
        }
        doclist.children[i].classList.add("success")
        doclist.children[i].setAttribute("docindex", i)
        doclist.children[i].onclick = (event) => {
            if (document.querySelector("li.reviewed.current")) document.querySelector("li.reviewed.current").classList.remove("current")
            event.target.classList.remove("success")
            event.target.classList.add("reviewed", "current")
            showEditPanel(event, availableDocs[doclist.children[i].id])
        }
    }

}

function showEditPanel(event, index) {
    const container = document.getElementById("contentAnalized")
    const variableContent = document.createElement('div');

    documentReviewed[index] = true

    variableContent.classList.add("variableContent");
    container.innerHTML = ""

    render_docResume(container, index);
    render_documentList(container, index);

    container.appendChild(variableContent);
    container.scrollIntoView({ behavior: 'smooth' });
}

function showInfoFromDocSelected(parentContainer, compressedFileIndex, documentIndex) {
    const container = document.getElementsByClassName("variableContent")[0]
    container.innerHTML = ""

    render_imageList(container,
        globalDataForSendToWP[compressedFileIndex].images[documentIndex],
        globalDataForSendToWP[compressedFileIndex].extractFolder,
        compressedFileIndex,
        documentIndex)

    renderPostContet(container, compressedFileIndex, documentIndex)

    parentContainer.scrollIntoView({ behavior: 'smooth' });
}

function renderPostContet(parentContainercontainer, compressedFileIndex, documentIndex) {
    const container = document.createElement('div')
    container.innerHTML = ""
    container.classList.add("postContent")

    render_title(container, documentIndex, compressedFileIndex)
    render_summaries(container, documentIndex, compressedFileIndex)
    render_content(container, documentIndex, compressedFileIndex)
    render_keywords(container, documentIndex, compressedFileIndex)
    render_description(container, documentIndex, compressedFileIndex)
    render_categories(container, documentIndex, compressedFileIndex)

    parentContainercontainer.appendChild(container);
}

function render_description(container, documentIndex, compressedFileIndex) {
    const childContainer = document.createElement('div')
    childContainer.classList.add('description')
    const title = document.createElement('h2')

    const description = document.createElement('p')
    description.textContent = globalDataForSendToWP[compressedFileIndex].content[documentIndex].description
    description.contentEditable = true

    description.onkeydown = (event) => { if (event.key === 'Enter') event.preventDefault() }
    description.oninput = () => globalDataForSendToWP[compressedFileIndex].content[documentIndex].description = description.textContent

    title.textContent = "Descripcion"
    childContainer.appendChild(title)
    childContainer.appendChild(description)

    container.appendChild(childContainer)

}

function render_keywords(container, documentIndex, compressedFileIndex) {
    const childContainer = document.createElement('div')
    childContainer.classList.add('keywords')
    const title = document.createElement('h2')

    title.textContent = "Etiquetas"
    childContainer.appendChild(title)

    for (let i in globalDataForSendToWP[compressedFileIndex].content[documentIndex].keyword) {
        let keyword = document.createElement('span')
        keyword.classList.add("keyword")
        keyword.setAttribute('index', i)
        keyword.ondblclick = (event) => {
            event.target.remove()
            globalDataForSendToWP[compressedFileIndex].content[documentIndex].keyword.splice(parseInt(event.target.getAttribute("index")), 1);

            for (let i = parseInt(event.target.getAttribute("index")); i < globalDataForSendToWP[compressedFileIndex].content[documentIndex].keyword.length; i++) {
                childContainer.children[i + 1].setAttribute("index", i)
            }
        }
        keyword.textContent = globalDataForSendToWP[compressedFileIndex].content[documentIndex].keyword[i]
        childContainer.appendChild(keyword)
    }

    container.appendChild(childContainer)
}

function render_content(container, documentIndex, compressedFileIndex) {
    const childContainer = document.createElement('div')

    childContainer.classList.add('content')

    if (globalDataForSendToWP[compressedFileIndex].content[documentIndex].content.length === 0) {
        let btn = document.createElement("button")
        btn.textContent = "Crear un parrafo nuevo"
        btn.classList.add("addSegment")
        btn.onclick = () => {
            btn.remove()
            globalDataForSendToWP[compressedFileIndex].content[documentIndex].content[0] = ""
            const newParagraph = document.createElement('p')
            newParagraph.setAttribute('index', 0)
            newParagraph.contentEditable = true
            newParagraph.oninput = () => globalDataForSendToWP[compressedFileIndex].content[documentIndex].content[
                parseInt(newParagraph.getAttribute("index"))
            ] = newParagraph.innerHTML
            newParagraph.onkeydown = (event) => {
                if (event.key === 'Enter')
                    add_new_paragraph(event, compressedFileIndex, documentIndex, 1, childContainer)
                if (event.key === 'Backspace' && event.target.textContent === "")
                    remove_paragraph(event, childContainer, compressedFileIndex, documentIndex)
            }
            childContainer.appendChild(newParagraph)
            newParagraph.focus()
        }
        childContainer.appendChild(btn)
    }

    for (let i = 0; i < globalDataForSendToWP[compressedFileIndex].content[documentIndex].content.length; i++) {
        let paragraph = document.createElement('p')
        paragraph.setAttribute('index', i)
        paragraph.contentEditable = true

        paragraph.oninput = () => {
            globalDataForSendToWP[compressedFileIndex].content[documentIndex].content[
                parseInt(paragraph.getAttribute("index"))
            ] = paragraph.innerHTML
        }
        paragraph.onkeydown = (event) => {
            if (event.key === 'Enter') {
                add_new_paragraph(event, compressedFileIndex, documentIndex, i + 1, childContainer)
            }
            if (event.key === 'Backspace' && event.target.textContent === "") {
                remove_paragraph(event, childContainer, compressedFileIndex, documentIndex)
            }
        }

        paragraph.innerHTML = globalDataForSendToWP[compressedFileIndex].content[documentIndex].content[i]
        childContainer.appendChild(paragraph)
    }

    container.appendChild(childContainer)
}

function remove_paragraph(event, container, compressedFileIndex, documentIndex) {

    if (event.target.getAttribute("index") === "0" && event.target.nextSibling) {
        event.target.nextSibling.focus()
    } else if (event.target.previousSibling) {
        event.target.previousSibling.focus()
    }

    globalDataForSendToWP[compressedFileIndex].content[documentIndex].content.splice(parseInt(event.target.getAttribute("index")), 1);

    event.target.remove()

    if (globalDataForSendToWP[compressedFileIndex].content[documentIndex].content.length === 0) {
        let btn = document.createElement("button")
        btn.textContent = "Crear un parrafo nuevo"
        btn.classList.add("addSegment")
        btn.onclick = () => {
            btn.remove()
            globalDataForSendToWP[compressedFileIndex].content[documentIndex].content[0] = ""
            const newParagraph = document.createElement('p')
            newParagraph.setAttribute('index', 0)
            newParagraph.contentEditable = true
            newParagraph.oninput = () => globalDataForSendToWP[compressedFileIndex].content[documentIndex].content[
                parseInt(newParagraph.getAttribute("index"))
            ] = newParagraph.innerHTML
            newParagraph.onkeydown = (event) => {
                if (event.key === 'Enter')
                    add_new_paragraph(event, compressedFileIndex, documentIndex, 1, container)
                if (event.key === 'Backspace' && event.target.textContent === "")
                    remove_paragraph(event, container, compressedFileIndex, documentIndex)
            }
            container.appendChild(newParagraph)
            newParagraph.focus()
        }
        container.appendChild(btn)
        return
    }

    for (let i = parseInt(event.target.getAttribute("index")); i < globalDataForSendToWP[compressedFileIndex].content[documentIndex].content.length; i++) {
        container.children[i].setAttribute("index", i)
    }
}

function add_new_paragraph(event, compressedFileIndex, documentIndex, index, container) {
    event.preventDefault()

    const newParagraph = document.createElement('p')
    newParagraph.setAttribute('index', index)
    newParagraph.contentEditable = true
    newParagraph.oninput = () => globalDataForSendToWP[compressedFileIndex].content[documentIndex].content[
        parseInt(newParagraph.getAttribute("index"))
    ] = newParagraph.innerHTML
    newParagraph.onkeydown = (event) => {
        if (event.key === 'Enter')
            add_new_paragraph(event, compressedFileIndex, documentIndex, index + 1, container)
        if (event.key === 'Backspace' && event.target.textContent === "")
            remove_paragraph(event, container, compressedFileIndex, documentIndex)
    }

    if (event.target.nextSibling)
        container.insertBefore(newParagraph, event.target.nextSibling);
    else
        container.appendChild(newParagraph)
    newParagraph.focus()
    globalDataForSendToWP[compressedFileIndex].content[documentIndex].content.splice(index, 0, ""); // Agregar un elemento vacío al array
    for (let i = index; i < globalDataForSendToWP[compressedFileIndex].content[documentIndex].content.length; i++) {
        container.children[i].setAttribute("index", i)
    }
    console.log(globalDataForSendToWP[compressedFileIndex].content[documentIndex].content)
}

function render_summaries(container, documentIndex, compressedFileIndex, sameContainer = undefined) {
    const containerChild = sameContainer ? sameContainer : document.createElement("ul")
    containerChild.classList.add("summaries")

    if (globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary.length === 0) {
        let btn = document.createElement("button")
        btn.textContent = "Crear un nuevo sumario"
        btn.classList.add("addSegment")
        btn.onclick = () => {
            btn.remove()
            globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary[0] = ""
            const summary = document.createElement('li')
            summary.setAttribute('index', 0)
            summary.contentEditable = true

            summary.oninput = () => {
                globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary[
                    parseInt(summary.getAttribute('index'))
                ] = summary.textContent
            }

            summary.onkeydown = (event) => { summary_key_event_handler(event, compressedFileIndex, documentIndex, containerChild) }
            containerChild.appendChild(summary)
            summary.focus()
        }
        containerChild.appendChild(btn)
    }

    for (let i in globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary) {
        let summary = document.createElement('li')
        summary.setAttribute("index", i)
        summary.contentEditable = true
        summary.oninput = () => {
            globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary[
                parseInt(summary.getAttribute('index'))
            ] = summary.textContent
        }
        summary.textContent = globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary[
            parseInt(summary.getAttribute('index'))
        ]
        summary.onkeydown = (event) => {
            summary_key_event_handler(event, compressedFileIndex, documentIndex, containerChild)
        }
        containerChild.appendChild(summary)
    }

    container.appendChild(containerChild)
}

function add_summary(event, compressedFileIndex, documentIndex, container) {
    event.preventDefault()

    const summary = document.createElement('li')
    summary.setAttribute("index", parseInt(event.target.getAttribute('index')) + 1)
    summary.contentEditable = true
    summary.oninput = () => {
        globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary[
            parseInt(summary.getAttribute('index'))
        ] = summary.textContent
    }
    summary.onkeydown = (event) => {
        summary_key_event_handler(event, compressedFileIndex, documentIndex, container)
    }

    if (event.target.nextSibling)
        container.insertBefore(summary, event.target.nextSibling);
    else
        container.appendChild(summary)

    summary.focus()
    globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary.splice(parseInt(event.target.getAttribute("index")) + 1, 0, "");

    for (let i = parseInt(summary.getAttribute('index')); i < globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary.length; i++) {
        container.children[i].setAttribute("index", i)
    }
    console.log(globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary)
}

function remove_summary(event, compressedFileIndex, documentIndex, container) {

    if (event.target.getAttribute("index") === "0" && event.target.nextSibling) {
        event.target.nextSibling.focus()
    } else if (event.target.previousSibling) {
        event.target.previousSibling.focus()
    }

    globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary.splice(parseInt(event.target.getAttribute("index")), 1);
    event.target.remove()

    if (globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary.length === 0) {
        let btn = document.createElement("button")
        btn.textContent = "Crear un nuevo sumario"
        btn.classList.add("addSegment")
        btn.onclick = () => {
            btn.remove()
            globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary[0] = ""
            const summary = document.createElement('li')
            summary.setAttribute('index', 0)
            summary.contentEditable = true

            summary.oninput = () => {
                globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary[
                    parseInt(summary.getAttribute('index'))
                ] = summary.textContent
            }

            summary.onkeydown = (event) => { summary_key_event_handler(event, compressedFileIndex, documentIndex, container) }
            container.appendChild(summary)
            summary.focus()
        }
        container.appendChild(btn)
        return
    }

    for (let i = parseInt(event.target.getAttribute('index')); i < globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary.length; i++) {
        container.children[i].setAttribute("index", i)
    }
}

function summary_key_event_handler(event, compressedFileIndex, documentIndex, container) {

    if (event.key === "Enter") {
        add_summary(event, compressedFileIndex, documentIndex, container)
    }

    if (event.key === 'Backspace' && event.target.textContent === "") {
        remove_summary(event, compressedFileIndex, documentIndex, container)
    }

}

function render_title(container, documentIndex, compressedFileIndex) {
    const childContainer = document.createElement('h1');
    childContainer.style.backgroundImage = `url('${SelfProtocol}//${SelfHost}/computed/${globalDataForSendToWP[compressedFileIndex].extractFolder}/${globalDataForSendToWP[compressedFileIndex].images[documentIndex][selectedImages[compressedFileIndex][documentIndex]]}')`

    const titleContent = document.createElement('span')
    childContainer.id = "postitle"

    titleContent.textContent = globalDataForSendToWP[compressedFileIndex].content[documentIndex].title
    titleContent.contentEditable = true
    titleContent.oninput = () => {
        globalDataForSendToWP[compressedFileIndex].content[documentIndex].title = titleContent.textContent
    }

    titleContent.onkeydown = (event) => {
        if (event.key === "Enter") event.preventDefault()
    }

    childContainer.appendChild(titleContent)

    container.appendChild(childContainer)
}

function render_imageList(container, imageList, folder, compressedFileIndex, documentIndex) {
    const childContainer = document.createElement('div');
    childContainer.classList.add("imageList");

    const title = document.createElement('h2')
    title.textContent = "Ímagenes para el documento seleccionado"
    childContainer.appendChild(title)

    for (let i = 0; i < imageList.length; i++) {
        let image = document.createElement('div');
        let imagep = document.createElement('p');

        imagep.textContent = imageList[i]
        image.appendChild(imagep)

        image.classList.add('image')
        if (i === selectedImages[compressedFileIndex][documentIndex]) {
            image.classList.add('active')
        }

        image.onclick = (event) => {
            document.getElementsByClassName("active")[0].classList.remove("active")
            event.target.classList.add("active")
            selectedImages[compressedFileIndex][documentIndex] = i
            let chilo = document.getElementById('postitle')
            chilo.removeAttribute('style')
            chilo.style.backgroundImage = `url('${SelfProtocol}//${SelfHost}/computed/${globalDataForSendToWP[compressedFileIndex].extractFolder}/${globalDataForSendToWP[compressedFileIndex].images[documentIndex][selectedImages[compressedFileIndex][documentIndex]]}')`
        }

        image.style.backgroundImage = `url('${SelfProtocol}//${SelfHost}/computed/${folder}/${imageList[i]}')`

        childContainer.appendChild(image)
    }

    container.appendChild(childContainer);
}

function render_docResume(container, index) {
    let totalImages = 0
    let totalDocuments = globalDataForSendToWP[index].documents.length

    for (let i = 0; i < globalDataForSendToWP[index].images.length; i++) {
        totalImages += globalDataForSendToWP[index].images[i].length
    }

    const docResume = document.createElement('div')
    const docResumeH2 = document.createElement('h2')
    let docResumeP = document.createElement('p')

    docResumeH2.textContent = "Resumen del documento"
    docResume.appendChild(docResumeH2)

    docResumeP.textContent = `Documentos en total: ${totalDocuments}`
    docResume.appendChild(docResumeP)

    docResumeP = document.createElement('p')
    docResumeP.textContent = `Imágenes en total: ${totalImages}`
    docResume.appendChild(docResumeP)

    docResume.classList.add('docResume')
    container.appendChild(docResume)
}

function render_documentList(container, index) {
    const containerChild = document.createElement('div')
    containerChild.classList.add("documentList")
    const containerH2 = document.createElement('h2')
    containerH2.textContent = "Documentos"

    containerChild.appendChild(containerH2)

    for (let i = 0; i < globalDataForSendToWP[index].documents.length; i++) {
        let containerChildChild = document.createElement('div')
        let spn = document.createElement('span')
        let btn = document.createElement('button')
        containerChildChild.classList.add("docitemcontainer")

        btn.classList.add("showDocBtn")
        btn.textContent = "📂"
        btn.onclick = () => {
            fetch(`${SelfProtocol}//${SelfHost}/open/${globalDataForSendToWP[index].extractFolder}/${globalDataForSendToWP[index].documents[i]}`).then((response) => console.log(response))
                .catch((err) => console.log(err))
        }

        spn.textContent = globalDataForSendToWP[index].documents[i]
        spn.onclick = () => { showInfoFromDocSelected(container, index, i) }
        containerChildChild.appendChild(spn)
        containerChildChild.appendChild(btn)
        containerChild.appendChild(containerChildChild)
    }

    container.appendChild(containerChild)
}

function render_categories(container, documentIndex, compressedFileIndex) {
    console.log(globalDataForSendToWP)
    console.log(selectedCategories)
    const childContainer = document.createElement('div')
    childContainer.classList.add('categories')

    const title = document.createElement('h2')
    title.textContent = "Categorías"
    childContainer.appendChild(title)


    let keys = Object.keys(globalCategories);
    for (let i = 0; i < keys.length; i++) {
        let btn = document.createElement("button")
        btn.classList.add("categories")
        btn.textContent = keys[i]

        if (selectedCategories[compressedFileIndex][documentIndex].includes(globalCategories[keys[i]])) {
            btn.classList.add("selected")
        }

        btn.onclick = (event) => {
            if (!event.target.classList.contains("selected") && !selectedCategories[compressedFileIndex][documentIndex].includes(globalCategories[keys[i]])) {
                event.target.classList.add("selected")
                selectedCategories[compressedFileIndex][documentIndex].push(globalCategories[keys[i]])
            } else {
                event.target.classList.remove("selected")
                selectedCategories[compressedFileIndex][documentIndex].splice(selectedCategories[compressedFileIndex][documentIndex].indexOf(keys[i]))
            }
            console.log(selectedCategories)
        }
        childContainer.appendChild(btn)
    }

    container.appendChild(childContainer)
}

function randomIntFromInterval(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min)
}
const username = document.getElementById("username");
const submitLoginBtn = document.getElementById("loginaction");
const alertText = document.getElementById("alert");
const logoutbtn = document.getElementById("logout");
const logincontainer = document.getElementById("login");

const email = document.getElementById("email");
const pwd = document.getElementById("pwd");

const baseURI = `${TargetProtocol}//${TargetHost}/`

submitLoginBtn.addEventListener("click", () => {
    const data = {
        "username": email.value,
        "password": pwd.value
    }
    email.disabled = true
    pwd.disabled = true
    submitLoginBtn.disabled = true
    alertText.textContent = ""
    logincontainer.classList.add("waiting")

    fetch(`${baseURI}wp-json/jwt-auth/v1/token`, {
        body: JSON.stringify(data),
        method: "POST",
        headers: { "Content-type": "application/json; charset=UTF-8" }
    }).then(response => response.json())
        .then((json) => {
            alertText.removeAttribute("class")
            console.log(json)

            if (json.hasOwnProperty('data')) {
                alertText.innerHTML = json["message"];

                email.disabled = false
                pwd.disabled = false
                submitLoginBtn.disabled = false

                email.value = ""
                pwd.value = ""
                logincontainer.removeAttribute("class")
                return
            }
            username.textContent = `Hola, ${json["user_display_name"]}!`
            setCookie('token', json["token"], 7);

            username.removeAttribute("style");
            logoutbtn.removeAttribute("style");
            alertText.style = "display:none;"
            logincontainer.style = "display: none;"
            document.getElementById("announce").remove();
            document.getElementById("segment").removeAttribute("style");
        })
        .catch((err) => {
            alertText.innerHTML = "No se pudo establecer conexión con el servidor...";

            email.disabled = false
            pwd.disabled = false
            submitLoginBtn.disabled = false

            email.value = ""
            pwd.value = ""
            logincontainer.removeAttribute("class")
            return
        })
})


function setCookie(nombre, valor, diasExpiracion) {
    const fechaExpiracion = new Date();
    fechaExpiracion.setTime(fechaExpiracion.getTime() + (diasExpiracion * 24 * 60 * 60 * 1000));
    const fechaExpiracionUTC = fechaExpiracion.toUTCString();
    const cookieString = `${nombre}=${valor}; expires=${fechaExpiracionUTC}; path=/`;
    document.cookie = cookieString;
}

function getCookie(nombre) {
    const nombreCocina = nombre + "=";
    const cookies = document.cookie.split(';');

    for (let i = 0; i < cookies.length; i++) {
        let cookie = cookies[i].trim();
        if (cookie.indexOf(nombreCocina) === 0) {
            return cookie.substring(nombreCocina.length, cookie.length);
        }
    }
    return null;
}

function deleteCookie(nombre) {
    document.cookie = `${nombre}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
}

if (getCookie("token") !== null) {
    email.disabled = true
    pwd.disabled = true
    submitLoginBtn.disabled = true

    alertText.textContent = "Espere, estamos verificando su sesión..."
    logincontainer.classList.add("waiting")

    fetch(`${baseURI}wp-json/wp/v2/users/me`, {
        method: "GET",
        headers: {
            "Content-type": "application/json; charset=UTF-8",
            'Authorization': `Bearer ${getCookie("token")}`
        }
    }).then(response => response.json())
        .then((json) => {
            console.log(json)
            if (json.hasOwnProperty('data')) {
                alertText.innerHTML = json["message"];

                email.disabled = false
                pwd.disabled = false
                submitLoginBtn.disabled = false

                email.value = ""
                pwd.value = ""
                logincontainer.removeAttribute("class")
                return
            }
            logincontainer.removeAttribute("class")
            username.textContent = `Hola, ${json["name"]}!`

            username.removeAttribute("style");
            logoutbtn.removeAttribute("style");
            alertText.style = "display:none;"
            logincontainer.style = "display: none;"
            document.getElementById("announce").remove();
            document.getElementById("segment").removeAttribute("style");
        })
        .catch((err) => {
            // nothing oviuliiiii
        })
}

logoutbtn.addEventListener('click', () => {
    deleteCookie("token");
    location.reload()
})
function sendPosts(event, delayInpt) {
    if (parseInt(delayInpt.value) > 1000 || parseInt(delayInpt.value) < 0) {
        alert("Ingrese un valor de delay válido")
        return
    }
    let response = true
    for (let i in documentReviewed) {
        if (!documentReviewed[i]) {
            response = confirm("Al parecer hay carpetas que no has revisado, ¿Deseas subirlo de todos modos?")
            break
        }
    }

    if (!response) return
    response = confirm("Todos los archivos seleccionados serán subido al servidor y serán publicado de forma automática, posteriormente se eliminarán los datos procesados del programa y no podrás acceder a tus modificaciones de nuevo por este medio, ¿Desea continuar?")
    if (!response) return

    event.target.disabled = true
    event.target.textContent = "Subiendo..."
    for (let i = 0; i < doclist.children.length - 1; i++) {
        if (doclist.children[i].classList.contains("error")) continue
        doclist.children[i].removeAttribute("class")
        doclist.children[i].classList.add('uploading')
    }
    const clonedDocList = doclist.cloneNode(true)
    doclist.replaceWith(clonedDocList)
    document.getElementById("contentAnalized").innerHTML = ""

    for (let i = 0; i < doclist.children.length - 1; i++) {
        if (doclist.children[i].classList.contains("error")) continue
        doclist.children[i].onclick = sendImage(doclist.children[i])
    }

    console.log(parseInt(delayInpt.value))
}

function sendImage(element) {
    const docuInde = parseInt(element.getAttribute("docindex"))

    for (let i = 0; i < Object.keys(selectedImages[docuInde]).length; i++) {
        imageURI = globalDataForSendToWP[docuInde].images[i][selectedImages[docuInde][i]]
        uploadImage(element, imageURI, i, parseInt(element.getAttribute("docindex")))
    }

}

/**
 * 
 * @param {*} element 
 * @param {string} imageURI 
 * @param {*} documentIndex 
 * @param {*} compressedFileIndex 
 */
function uploadImage(element, imageURI, documentIndex, compressedFileIndex) {
    const URL = `${SelfProtocol}//${SelfHost}/computed/${globalDataForSendToWP[compressedFileIndex].extractFolder}/${imageURI}`;

    fetch(URL)
        .then(response => response.blob())
        .then(blob => {
            const mimetype = imageURI.toLocaleLowerCase().includes("jpeg") ? "image/jpeg" :
                imageURI.toLocaleLowerCase().includes("jpg") ? "image/jpg" :
                    imageURI.toLocaleLowerCase().includes("png") ? "image/png" : "";
            const image = new File([blob], imageURI, { type: mimetype });

            const formData = new FormData();
            formData.append("file", image);

            fetch(`${TargetProtocol}//${TargetHost}/wp-json/wp/v2/media`, {
                method: 'POST',
                body: formData,
                headers: {
                    'Authorization': `Bearer ${getCookie("token")}`,
                },
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Imagen subida:', data);
                    uploadInfo(element, data, documentIndex, compressedFileIndex)
                })
                .catch(error => {
                    console.error('Error al subir la imagen:', error);
                });
        }).catch(error => {
            console.error('Error al obtener el Blob:', error);
        });
}

function uploadInfo(element, image, documentIndex, compressedFileIndex) {
    let realElement = document.getElementById(element.id)
    let tagsForSend = []

    for (let i = 0; i < globalDataForSendToWP[compressedFileIndex].content[documentIndex].keyword.length; i++) {
        if (globalTags[globalDataForSendToWP[compressedFileIndex].content[documentIndex].keyword[i]])
            tagsForSend.push(globalTags[globalDataForSendToWP[compressedFileIndex].content[documentIndex].keyword[i]]);
    }

    realElement.removeAttribute("class")
    realElement.classList.add("standby")

    let bodyToSenz = {
        "slug": globalDataForSendToWP[compressedFileIndex].content[documentIndex].title.trim().toLocaleLowerCase().replace(/[^a-zA-Z\s]/g, '').replace(/\s+/g, '-'),
        "status": "publish",
        "type": "post",
        "title": globalDataForSendToWP[compressedFileIndex].content[documentIndex].title,
        "content": "",
        "excerpt": globalDataForSendToWP[compressedFileIndex].content[documentIndex].description,
        "featured_media": image.id,
        "yoast_head_json": {
            "title": `${globalDataForSendToWP[compressedFileIndex].content[documentIndex].title} | Noticiero Regimen de Chiapas`,
            "description": globalDataForSendToWP[compressedFileIndex].content[documentIndex].description,
            "og_locale": "es_ES",
            "og_type": "article",
            "og_title": `${globalDataForSendToWP[compressedFileIndex].content[documentIndex].title} | Noticiero Regimen de Chiapas`,
            "og_description": globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary[0] ? globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary[0] : "",
            "og_url": `https://regimendechiapas.com.mx/${globalDataForSendToWP[compressedFileIndex].content[documentIndex].title.trim().toLocaleLowerCase().replace(/[^a-zA-Z\s]/g, '').replace(/\s+/g, '-')
                .replace(/\s+/g, '-')}/`,
            "og_site_name": "Regimen de Chiapas",
            "article_publisher": "https://www.facebook.com/RegimenChiapas",
            "og_image": [
                {
                    "width": image.media_details.width,
                    "height": image.media_details.height,
                    "url": image.source_url,
                    "type": image.mime_type
                }
            ]
        },
        "categories": selectedCategories[compressedFileIndex][documentIndex],
        "tags": tagsForSend
    }

    console.log(bodyToSenz);

    for (let i = 0; i < globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary.length; i++) {
        bodyToSenz.content += '<!-- wp:heading {"level":4} -->'
        bodyToSenz.content += `<h4 class="wp-block-heading" id="${globalDataForSendToWP[compressedFileIndex].content[documentIndex].title.trim().toLocaleLowerCase().replace(/[^a-zA-Z\s]/g, '').replace(/\s+/g, '-')}">${globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary[i]}</h4>`
        bodyToSenz.content += '<!-- /wp:heading -->'
    }

    for (let i = 0; i < globalDataForSendToWP[compressedFileIndex].content[documentIndex].content.length; i++) {
        bodyToSenz.content += '<!-- wp:paragraph -->'
        bodyToSenz.content += `<p>${globalDataForSendToWP[compressedFileIndex].content[documentIndex].content[i]}</p>`
        bodyToSenz.content += '<!-- /wp:paragraph -->'
    }

    var xhr = new XMLHttpRequest();
    xhr.open("POST", `${TargetProtocol}//${TargetHost}/wp-json/wp/v2/posts`);
    xhr.setRequestHeader("Authorization", `Bearer ${getCookie("token")}`);
    xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            if (xhr.status === 200 || xhr.status === 201) {
                document.getElementsByClassName("progresContainer")[0].innerHTML = ""
                var data = JSON.parse(xhr.responseText);
                realElement.removeAttribute('class');
                realElement.classList.add('uploadedContent');

                const result = document.createElement('span')
                result.textContent = globalDataForSendToWP[compressedFileIndex].documents[documentIndex]

                const cpybtn = document.createElement("button")
                cpybtn.textContent = "Copiar contenido"
                cpybtn.onclick = () => { clipboardHandler(data.link, globalDataForSendToWP[compressedFileIndex].content[documentIndex].title,globalDataForSendToWP[compressedFileIndex].content[documentIndex].summary) }

                const link = document.createElement("a")
                link.href = data.link
                link.target = "__blank"
                link.textContent = "Ver Entrada"

                result.appendChild(link)
                result.appendChild(cpybtn)

                document.getElementById("contentAnalized").appendChild(result)
                document.getElementById("contentAnalized").classList.add("results")
                console.log(data);
            } else {
                console.error("Ha ocurrido un error al publicar:", xhr.status, xhr.statusText);
            }
        }
    };

    xhr.send(JSON.stringify(bodyToSenz));

}

function clipboardHandler(text,title,summary) {
    navigator.clipboard.writeText(`${title}\n${summary}\n${text}`)
}